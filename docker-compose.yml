version: "3"
services:
  gateway:
    build: ./gateway
    restart: always
    hostname: gateway
    env_file:
      - .env
    ports:
      - "8080:8080"
    networks:
      - backend
      - frontend
  authentication:
    build: ./authentication
    restart: always
    hostname: authentication
    env_file:
      - .env
    networks:
      - backend
    links:
      - db
  permission:
    build: ./permission
    restart: always
    hostname: permission
    env_file:
      - .env
    networks:
      - backend
  users:
    build: ./users
    restart: always
    hostname: users
    env_file:
      - .env
    networks:
      - backend
    links:
      - db
  db:
    image: "mongo"
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
      MONGO_USER: ${MONGO_USER}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
      TZ: "Europe/Warsaw"
    volumes:
      - "./db/data/db-files:/data/db"
      - "./db/init/:/docker-entrypoint-initdb.d/"
    ports:
      - 27017:27017
    networks:
      - backend
  redis:
    image: redis
    restart: always
    hostname: redis
    networks:
      - backend
    env_file:
      - .env
  rabbitmq:
    image: rabbitmq:3-management
    restart: always
    hostname: rabbitmq
    networks:
      - frontend
      - backend
    env_file:
      - .env
    volumes:
      - "./configs/neutrino-api.json:/tmp/neutrino-api.json"
    environment:
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbitmq_management load_definitions "/tmp/neutrino-api.json"
    ports:
      - "15672:15672"
networks:
  backend:
    driver: bridge
  frontend:
    external:
      name: infrastructure
